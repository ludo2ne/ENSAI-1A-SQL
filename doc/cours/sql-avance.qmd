---
title: "SQL avancé"
description: "[Slides](sql-avance-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [SQL avancé](sql-avance.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: sql-avance-slides.html
mermaid:
  theme: forest
code-line-numbers: false
from: markdown+emoji
---


**Données utilisées**

```{.sql}
CREATE TABLE echecs.joueuse (
    id_joueuse     SERIAL         PRIMARY KEY,   
    nom            VARCHAR(50)    NOT NULL, 
    prenom         VARCHAR(50)    NOT NULL, 
    date_naissance TIMESTAMP,                 
    elo            INT            CHECK (elo > 0),  
    mail           VARCHAR(100)   UNIQUE,         
    est_arbitre    BOOLEAN        DEFAULT false,
    code_pays      VARCHAR(2),          
    taux_victoires FLOAT          CHECK (taux_victoires BETWEEN 0 AND 1)
);
```


## Sous-requête

### Dans un filtre

Vous souhaitez lister les joueuses avec un elo supérieur à la moyenne.

<br>

::: {.fragment}
```{.sql}
SELECT nom, 
       prenom,
       elo
FROM echecs.joueuse
WHERE elo >= (SELECT AVG(elo) 
                FROM echecs.joueuse);
```
:::

:::{.notes}
Vu dans les 1er TP :

- `SELECT AVG(elo) FROM echecs.joueuse` renvoie un nombre
- on peut le comparer à un autre nombre
:::

### Imbriquer les SELECT

```{.sql}
SELECT j.nom, 
       j.prenom, 
       j.elo,
       mec.max_elo_club
  FROM (SELECT id_club,
               MAX(elo) AS max_elo_club
          FROM joueuse
         GROUP BY id_club) mec
  JOIN joueuse j USING(id_club);
```

:::{.notes}
Ceci est également une table et peut être requêtée par la suite

```{.sql}
SELECT id_club,
       MAX(elo) AS max_elo_club
  FROM joueuse
 GROUP BY id_club
```
:::

### EXISTS

```{.sql}
SELECT *
  FROM echecs.club c
 WHERE EXISTS (SELECT 1
                 FROM echecs.joueuse j
                WHERE c.id_club = j.id_club
                  AND j.elo > 2400);
```

La syntaxe ressemble à celle du `IN` mais le `EXISTS` est plus performant.

```{.sql}
SELECT *
  FROM echecs.club c
 WHERE c.id_club IN (SELECT j.id_club
                       FROM echecs.joueuse j
                      WHERE j.elo > 2400);
```

:::{.notes}
- EXISTS : dès qu'une correspondance est trouvée, c'est gagné
- IN : génére l'intégralité de la sous-table
:::

## Les vues

### Joueuses Françaises

::: {.callout-note title="Question"}
Imaginons que nous avons de nombreuses requêtes à écrire sur les joueuses françaises ayant plus de 2000 elo.

Et nous n'avons pas envie de nous embêter à écrire à chaque fois toutes les restrictions.
:::

### Nouvelle table

Solution 1 : créons une nouvelle table

```{.sql}
CREATE TABLE echecs.joueuse_fr_2000
AS
SELECT *
  FROM echecs.joueuse
 WHERE code_pays = 'FR'
   AND elo >= 2000
```

:::::: {.fragment}
::: {.callout-caution title="Problèmes"}
- Duplication des données
- Mise à jour
:::
::::::


### Common Table Expression

Pour une utilisation ponctuelle, utilisez une CTE :sunglasses:

- Commencez par définir votre sous-requête *joueuses_fr_elo2000* avec `WITH`
- Appelez *joueuses_fr_elo2000* dans la requête principale

```{.sql}
WITH joueuses_fr_elo2000 
AS (SELECT *
      FROM echecs.joueuse
     WHERE code_pays = 'FR' 
       AND elo > 2000
)
SELECT nom, prenom, elo
  FROM joueuses_fr_elo2000
 WHERE prenom LIKE 'A%';
```

:::{.notes}
- Usage avancé
- Assez classe
- Comme une sous-requête
- Ou comme si vous avez créé une vue temporaire
:::


### Table temporaire

N'existe que le temps de la session.

<br> 

```{.sql}
CREATE TEMPORARY TABLE joueuses_fr_elo2000 
AS
SELECT *
  FROM echecs.joueuse
 WHERE code_pays = 'FR' 
   AND elo > 2000;
```

::: {.callout-caution title="Remarque"}
Une table temporaire n'est pas définie dans un schéma.
:::

### Vue

::: {.callout-note title="Définition"}
Une vue représente une table virtuelle, dont la structure et les données proviennent du résultat d'une requête SQL prédéfinie. 

Elle ne stocke pas directement les données, mais la requête elle-même, et s'exécute à chaque utilisation.
:::

<br>

```{.sql}
CREATE VIEW echecs.joueuses_fr_elo2000 
AS
SELECT *
  FROM echecs.joueuse
 WHERE code_pays = 'FR' 
   AND elo > 2000;
```

:::{.notes}
- Se requête comme si c'est une table
- SELECT only
- PAS de UPDATE, DELETE, INSERT
:::

### Avantages et inconvénients

- :heavy_check_mark: Simplicité d'accès aux données
- :heavy_check_mark: Meilleure organisation des données
- :heavy_check_mark: Contrôle des accès aux données
- :x: Performance

:::{.notes}
- Interroger sans se soucier des structures complexes des tables
- Sauvegarde de requêtes complexes
- Structurer logiquement les données
- Masquer des colonnes / lignes sensibles
- :x: s'exécutent dynamiquement à chaque appel 
:::


### Vues matérialisées

Photo à un instant t (snapshot) :camera:

<br>

```{.sql}
CREATE MATERIALIZED VIEW joueuses_fr_elo2000 
AS
SELECT *
  FROM echecs.joueuse
 WHERE code_pays = 'FR' 
   AND elo > 2000;
```

## Gérer les droits

L'utilisateur qui crée une table peut distribuer des droits aux autres.

Voir section *priviléges* de la doc PostgreSQL

### Donner des droits sur une table

```{.sql}
-- Lecture pour tous
GRANT SELECT ON echecs.joueuse TO PUBLIC;

-- Tous les droits
GRANT ALL PRIVILEGES ON echecs.joueuse TO chantal WITH GRANT OPTION;
```

<br>

- `PUBLIC` : tous les utilisateurs
- Suffixe `WITH GRANT OPTION` pour donner le droit de transmettre ce droit


### Retirer des droits

```{.sql}
-- Lecture
REVOKE SELECT ON echecs.joueuse TO chantal;

-- Tous les droits
REVOKE ALL PRIVILEGES ON echecs.joueuse TO chantal;
```

<br>

Suffixe `CASCADE` pour retirer les droits à ceux qui ont reçu les droits de la part de...

### Rôle

Pour une gestion simplifiée des droits

```{.sql}
-- créer un rôle
CREATE ROLE eleve;

-- ajouter des droits au rôle
GRANT SELECT, INSERT ON echecs.joueuse TO eleve;

-- donner le rôle à Chantal
GRANT eleve TO chantal;
```

::: {.notes}
Imaginons que pour chaque nouvel élève, il faut donner les droits sur 20 tables.

Plus pratique avec les rôles.
:::

### Droits sur un schéma

```{.sql}
-- droit d'accès au schéma i.e. de consulter les objets du schéma
GRANT USAGE ON SCHEMA echecs TO PUBLIC;

-- retire à Chantal le droit de créer de nouveaux objets (tables, vues, etc.) dans le schéma
REVOKE CREATE ON SCHEMA echecs FROM chantal;

-- Autorise à effectuer des requêtes SELECT sur toutes les tables du schéma
GRANT SELECT ON ALL TABLES IN SCHEMA echecs TO PUBLIC;
```

::: {.notes}
pas de question à l'exam sur les droits de schéma
:::

## Transactions

### Exemple classique

::: {.callout-important title="Mission"}
Vous devez transférer discrétement et sans vous tromper 10 millions entre les comptes de Shakira et Cristiano.

Malheureusement l'opération est assez longue et vous devez vous prémunir contre le risque d'une interruption.

Comment faire ? :confused:
:::

### Transfert de fonds

```{.sql}
BEGIN; -- Début de la transaction

UPDATE compte SET solde = solde - 10000000 WHERE id = 1;
UPDATE compte SET solde = solde + 10000000 WHERE id = 2;

COMMIT; -- Valider si ok
```

<br>

```{.sql}
ROLLBACK; -- en cas d'erreur
```

:::{.notes}
- Plusieurs utilisateurs peuvent faire des requêtes en même temps
- LOCK
- SAVEPOINT my_savepoint;
- ROLLBACK TO my_savepoint;
- mode AUTOCOMMIT 
:::


### Propriétés ACID

Pour définir la fiabilité des transactions :

- **Atomicité** : Une transaction est "tout ou rien"
- **Cohérence** : La base reste dans un état valide avant et après la transaction
- **Isolation** : Les transactions concurrentes n'interfèrent pas entre elles
- **Durabilité** : Une transaction validée est enregistrée de manière permanente, même en cas de panne

:::{.notes}
- Soit toutes les opérations réussissent, soit elles sont annulées (rollback)
:::


## Index

### Créer un index

::: {.callout-note title="Définition"}
Un index est une structure de données qui améliore la vitesse des opérations de lecture sur une table en facilitant la recherche des données.

Il permet une lecture plus rapide sur une colonne utilisée fréquemment dans *WHERE*, *JOIN*, *GROUP BY*, *ORDER BY*
:::

```{.sql}
CREATE INDEX echecs.idx_nom_joueuse ON echecs.joueuse (nom);
```

:::{.notes}
- Recherche longue si beaucoup de lignes
- Système clé-valeur (index -> ligne)
:::


### Avantages et inconvénients

- :heavy_check_mark: Haute cardinalité
- :heavy_check_mark: Peu de valeurs nulles
- :x: Créations, mises à jour
- :x: Prend de la place

:::{.notes}
- si Haute cardinalité : beaucoup de valeurs distinctes
- Si une colonne est souvent modifiée, l'index associé doit être mis à jour
- Index sous jacent sur colonnes UNIQUE (PK incluse)
:::


## Trigger

::: {.callout-note title="Définition"}
Un trigger est une fonction qui s'exécute automatiquement en réponse à une mise à jour d'une table

Il permet par exemple de :

- Garantir l'intégrité des données
- Implémenter des règles métier
- Synchroniser des données
:::

:::{.notes}
Peut se déclencher avant ou après une maj

- Garantir l'intégrité des données : Valider ou corriger les données avant leur enregistrement.
- Implémenter des règles métier : Empêcher des suppressions ou modifications non autorisées.
- Synchroniser des données : Mettre à jour des tables liées automatiquement.
:::

