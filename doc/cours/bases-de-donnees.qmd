---
title: "Bases de Données"
description: "[Slides](bases-de-donnees-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Bases de Données](bases-de-donnees.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: bases-de-donnees-slides.html
mermaid:
  theme: forest
code-line-numbers: false
from: markdown+emoji
---

## Une donnée ?

::: {.fragment}
- texte (nom, prénom, ville...)
- numérique (age, prix...)
- date
- liste (compétences, loisirs)
- image
- fichier
:::


:::{.notes}
- types ?
- valeurs ?
- représente quelque chose
:::

### Définition d'une donnée

:::::: {.fragment}

::: {.callout-note title="Définition"}
Une **donnée** est une information brute composée de 3 éléments :

- un concept (exemple : hauteur d'un monument)
- un domaine des possibles (nombre entier positif et une unité : mètres)
- une valeur (pour la tour Eiffel : 324)
:::

Source : [Qu'est-ce qu'une donnée ?](https://www.insee.fr/fr/information/5008707){target="_blank"}, Courrier des statistiques N5, Pascal Rivière

::::::


### Où stocker des données

::: {.incremental}
- Fichier txt
- Fichier csv
- Fichier [json](https://www.json.org/json-fr.html){target="_blank"}, [Exemple](https://anapioficeandfire.com/api/houses){target="_blank"}
- Fichier [parquet](https://parquet.apache.org/){target="_blank"}
- Base de données
:::

::: {.notes}
J'avais eu une question lors de la prez Git : où on stocke les données si on peut pas les mettre sur GitHub.

- On ne garde pas les données sur sa machine (risque de fuite)
- Dans l'idéal on bosse dans le cloud et on stocke sur S3
- Sinon on travaille dans un espace dédié (AUS)

Suivre sur Linkedin : Mauvière, Holtz, Blefari, Lesur, Galiana, Degorre, Natacha NJONGWA
:::

### Format Parquet

- Stockage orienté colonne
- Contient des métadonnées
- Adapté pour le stockage de données figées

::: {.callout-tip title="Articles intéressants"}
- [Parquet pour remplacer csv](https://www.icem7.fr/outils/parquet-devrait-remplacer-le-format-csv/){target="_blank"}, Éric Mauvière, Icem7
- [Comment bien préparer son Parquet](https://www.icem7.fr/outils/comment-bien-preparer-son-parquet/){target="_blank"}, Éric Mauvière, Icem7
- [Lire et écrire des fichiers Parquet](https://book.utilitr.org/03_Fiches_thematiques/Fiche_import_fichiers_parquet.html){target="_blank"}, UtilitR
:::

:::{.notes}
- Données figées -> parquet
- Données mouvantes -> bdd PostgreSQL
- Tad Viewer pour afficher le contenu d'un parquet
:::


## Une base de données ?

:::::: incremental
::: {.callout-note title="Définition"}
Une **base de données** est un ensemble de données rassemblées et stockées de manière organisée dans un but spécifique.
:::
::::::

:::{.notes}
Types ?

On n'utilise pas la même structure pour du texte ou des fichiers.
:::

## Enjeux

::: {.incremental}
- Accès aux données : langage SQL
- Sécurité des données : seuls les utilisateurs autorisés (droits)
- Partage des données : facile en lecture, mais en écriture ?
- Non-redondance des données
- Cohérence des données : respect des contraintes d'intégrité
::: 

::: {.notes}
- Se brancher à la BDD qui est sur un serveur
- Règles pour la cohérence. :warning: trop de règles -> bon dosage
:::

## Types de bases de données

### Hiérarchique

- Données organisées comme un arbre 
- Relations de type parent-enfant
- Annuaires LDAP, systèmes de fichiers

```{mermaid}
stateDiagram 
    ENSAI --> Permanent
    ENSAI --> Eleve
    Permanent --> Enseignant
    Permanent --> Administratif
    Eleve --> 1A
    Eleve --> 2A
    Eleve --> 3A
```

### Réseau

- Organisée en graphe
- Les enregistrements peuvent avoir plusieurs parents et enfants
- Réseaux de transports
  

### Relationnelle

- Organisée en tables
- Lien entre les tables

::: {.notes}
Quelques tables sont gérables avec Excel ou Calc.

Mais ça devient vite trop compliqué.
:::

### NoSQL

Nombreux sous-types :

::: {.small-table}
| **Type**      | **Description**                                                                          | **Exemple**              |
|---------------|------------------------------------------------------------------------------------------|--------------------------|
| Clé-valeur    | Données sous forme de paires clé-valeur. Idéale pour des lectures rapides avec peu de structure. | DynamoDB                 |
| Colonnes      | Organisée en colonnes, adaptée aux grandes quantités de données avec peu de relations entre elles. | Cassandra                |
| Document      | Stocke des documents semi-structurés, souvent en format JSON ou XML, permettant une grande flexibilité. | MongoDB                 |
| Graphes       | Organisée sous forme de nœuds et de relations, idéale pour des données très connectées ou inter-relées. | Neo4j                   |
:::

:::{.notes}
Not Only SQL
:::

### Autres

- Bases de données de séries temporelles

## Base de données relationnelle

### Table

- Composée de lignes et de colonnes
- Chaque table représente une entité
- Chaque [ligne]{.underline} est un enregistrement
- Chaque [colonne]{.underline} représente un attribut de l'entité
  - Types de données : texte, num...

:::{.notes}
Imaginez un classeur Excel avec plusieurs feuilles
:::

### Relations entre les tables

- [**Clé primaire**]{.underline} (PK) pour identifier chaque enregistrement dans une table
  - de manière unique
  - sans ambiguïté
- [**Clé étrangère**]{.underline} (FK) pour créer des liens avec d'autres tables
  - attribut d'une table A
  - correspond à la clé primaire d'une table B

::: {.notes}
Exemples juste après
:::

### Clé primaire ?

::: {.small-table}
| **nom**                | **prenom**       | **elo** |
|------------------------|------------------|---------|
| Guichard               | Pauline          | 2357    |
| Daulyte-Cornette       | Deimante         | 2371    |
| Navrotescu             | Andreea          | 2338    |
| Sebag                  | Marie            | 2448    |
| Millet                 | Sophie           | 2366    |
| Skrichempko            | Almira           | 2361    |

: joueuse ♕
:::

<br>

::: {.fragment}
Quel champ choisir comme clé primaire ? :neutral_face:
:::

### Clé primaire technique

Créons une séquence numérique. :sunglasses:

::: {.small-table}
| **id_joueuse** | **nom**                | **prenom**       | **elo** |
|----------------|------------------------|------------------|---------|
| 1              | Guichard               | Pauline          | 2357    |
| 2              | Daulyte-Cornette       | Deimante         | 2371    |
| 3              | Navrotescu             | Andreea          | 2338    |
| 4              | Sebag                  | Marie            | 2448    |
| 5              | Millet                 | Sophie           | 2366    |
| 6              | Skrichempko            | Almira           | 2361    |

: joueuse
:::

### Clé primaire

- Attribut (ou ensemble d'attributs)
- Unique
- Non nulle
- Immuable

::: {.callout-tip}
Sauf mention contraire, nous utiliserons une clé primaire "technique" : séquence.
:::

:::{.notes}
Immuable : 

- idéalement stable, elle ne change pas au cours du temps
- Pour maintenir l'intégrité des liens avec d'autres tables

Remarque : pas obligatoire d'avoir une clé primaire

[Question]{.underline} : nous voulons ajouter le club  de chaque joueuse, comment faire ?
:::

### Clé étrangère ?

Comment relier ces 2 tables ?

- une joueuse joue pour un seul club
- Un club peut avoir plusieurs joueuses

```{mermaid}
classDiagram
    class joueuse {
        id_joueuse PK
        nom
        prenom
        elo
    }
    
    class club {
        id_club PK
        nom
        ville
    }
```

---

::: {.small-table}
| **id_club**  | **nom**                          | **ville**            |
|--------------|----------------------------------|----------------------|
| 1            | C'Chartres Echecs                | Chartres             |
| 2            | Bischwiller                      | Bischwiller          |
| 3            | Asnieres - le Grand Echiquier    | Asnieres             |
| 4            | Tours des Hauts-De-France        | Saint-Quentin        |

: club {tbl-colwidths="[15,55,30]"}
:::

### Clé étrangère

En ajoutant une clé étrangère.

```{mermaid}
classDiagram
    class joueuse {
        id_joueuse PK
        nom
        prenom
        elo
        id_club FK
    }
    
    class club {
        id_club PK
        nom
        ville
    }
```



---

::: {.small-table}
| **id_joueuse** | **nom**                | **prenom**       | **elo** | **id_club**  |
|----------------|------------------------|------------------|---------|--------------|
| 1              | Guichard               | Pauline          | 2357    | 3            |
| 2              | Daulyte                | Deimante         | 2371    | 1            | 
| 3              | Navrotescu             | Andreea          | 2338    | 2            |
| 4              | Sebag                  | Marie            | 2448    | 2            |
| 5              | Millet                 | Sophie           | 2366    | 3            |
| 6              | Skrichempko            | Almira           | 2361    |              |

: joueuse
:::

::::::{.fragment}
:::::: {.callout-caution title="Remarques"}
Une clé étrangère peut être nulle.

Une clé étrangère référence une valeur existante de clé primaire.
:::
::::::

### Question

Et si vous supprimez, le club de C'Chartres Echecs ? :innocent:

<br>

::::::{.fragment}
::: {.callout-warning}
```
SQL Error [23503]: ERROR: UPDATE or DELETE on table "club" violates the foreign key constraint "fk_id_club" on table "joueuse". Detail: Key (id_club)=(1) is still referenced from table "joueuse".
```
:::
::::::

::: {.notes}
id_club = 1

Erreur aussi si vous essayer d'insert une joueuse avec id_club=9
:::

### Autre question

Si une joueuse peut adhérer à plusieurs clubs ? :confused:

::::::{.incremental}
- *id_club* devient une liste de clubs ?
::::::


::::::{.fragment}
::: {.hide-html-render}
![](https://media.giphy.com/media/Y8hzdgPnZ6Hwk/source.gif){width=50%}
:::
::::::

::: {.notes}
Par exemple si notre bdd contient aussi les clubs belges, allemands, espagnols...
:::


### Table d'association

Création d'une table d'association : **adhesion** :sweat_smile:

```{mermaid}
classDiagram
    class Adhesion {
        id_joueuse FK
        id_club FK
    }
```

---

::: {.small-table}
| **id_club**  | **id_joueuse** |
|--------------|----------------|
| 1            | 2              |
| 2            | 3              |
| 2            | 4              |
| 2            | 6              |
| 3            | 1              |
| 3            | 5              |
| 4            | 1              |
| 4            | 2              |

: adhesion
:::

::: {.notes}
Imaginons que la Picardie devienne Belge.

Clé primaire ?

- id_adhesion
- (id_club, id_joueuse)
:::


## Associations

Il existe plusieurs types d'associations entre tables.

### Association 1:1

Une entité dans la table A est associée à une seule entité dans la table B.

Exemple :

- Une personne a une seule carte vitale
- Une carte vitale appartient à une seule personne

:::{.notes}
on aurait pu tout mettre dans la même table

[Question]{.underline} : Où met-on la clé étrangère ?
:::

### Association 1:n

Une entité dans la table A peut-être associée à plusieurs entités dans la table B.

Exemple :

- Un club est composé de plusieurs joueuses
- Une joueuse adhère à un seul club

:::{.notes}
Supposons de nouveau qu'une joueuse ne joue que pour 1 seul club.

[Question]{.underline} : Où met-on la clé étrangère ?
:::

### Association n:n

Une entité dans la table A peut-être associée à plusieurs entités dans la table B.

Et inversement, une entité dans la table B peut-être associée à plusieurs entités dans la table A.

Exemple :

- une joueuse participe à plusieurs tournois
- Un tournoi regroupe plusieurs joueuses

:::{.notes}
[Question]{.underline} : Comment fait-t-on ?

- Table d'association
:::


### Association récursive

Une table peut avoir des relations avec elle-même.

Dans ce cas, la table contient une clé étrangère qui référence [sa propre clé primaire]{.underline}.

Exemple :

- *employe ([id_employe]{.underline}, nom, prenom, #id_superieur)*
- *id_superieur* clé étrangère qui référence *id_employe*


::: {.notes}
Conventions

- PK soulignée
- FK avec #
:::


### Association multiples

Une table A peut avoir plusieurs relations avec une table B.

Exemple :

- *equipe ([id_equipe]{.underline}, nom)*
- *match ([id_match]{.underline}, #id_equipe1, #id_equipe2, score)*


::: {.notes}
Nous reviendrons sur les associations quand nous parlerons des jointures.
:::

## SGBD

::: {.callout-important title="Définition"}
Un **Système de Gestion de Bases de Données** est un logiciel qui permet de créer, gérer et manipuler des bases de données.

Il fournit des outils pour stocker, récupérer, modifier et sécuriser les données.
:::

- **[PostgreSQL](https://www.postgresql.org/){target="_blank"}**
- [MySQL](https://www.mysql.com/){target="_blank"}, [MariaDB](https://mariadb.org/){target="_blank"}
- [Oracle Database](https://www.oracle.com/database/){target="_blank"}
- [SQLite](https://www.sqlite.org/){target="_blank"}

### PostgreSQL

- Open Source, Libre
- Communauté active
- Stable et performant
- Basé sur le modèle client-serveur
- Extension [PostGIS](https://postgis.net/){target="_blank"} (Données géographiques)

::: {.notes}
utilisé à l'INSEE

client-serveur classique : 

- le composant serveur central « postmaster » gère tous les fichiers de bdd 
- ainsi que toutes les connexions établies pour la communication avec le serveur de bdd. 

Les utilisateurs n'ont besoin que d'un programme client approprié pour établir la connexion
:::

### Outil de Gestion et Administration

Il est nécessaire d'avoir un **outil pour gérer et administrer** une base de données.

::: {.callout-tip}
- PostgreSQL : Installé sur un serveur, sert de moteur de base de données
- pgAdmin : Interface graphique pour interagir avec PostgreSQL
:::

- [pgAdmin](https://www.pgadmin.org/){target="_blank"}
- [DBeaver](https://dbeaver.io/){target="_blank"}

### Kesako

- Base de données : endroit où sont stockées les informations
- SGBD : logiciel qui permet de créer, gérer et manipuler les bases de données
- Outil de gestion du SGBD : application graphique qui facilite l'interaction avec un SGBD
- SQL : Langage pour donner les instructions à la base de données

::: {.notes}
- BDD : bibliothèque
- SGBD : bibliothécaire
- Outil : tableau de bord interactif pour les bibliothécaires

A l'ENSAI :

- vous avez chacun une bdd (nom=id)
- utilisez DBeaver pour vous y connecter
:::





