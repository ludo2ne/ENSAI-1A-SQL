---
title: "Exercices vintages üíæ"
description: "TP2"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
lightbox: true
---


## Introduction {.unnumbered}

Lors du premier TP, nous avons utilis√© DuckDB pour lire les donn√©es d'un fichier parquet. Aujourd'hui nous allons cr√©er notre propre base de donn√©es PostgreSQL, puis y d√©clarer des tables et ins√©rer de donn√©es. Enfin nous allons requ√™ter ces donn√©es.

Lors de ce TP, vous allez :

- Cr√©er votre base de donn√©es [PostgreSQL](https://www.postgresql.org/){target="_blank"}
- Lancer des scripts de cr√©ation de tables et d'insertion de donn√©es
- Relier des tables en utilisant les jointures
- S√©lectionner et filtrer des donn√©es


::: {.callout-important}
- √âcrivez des requ√™tes jolies !
:::

## Lancement des services

Pour plus de d√©tails, allez dans l'onglet [Datalab](../outils/datalab.qmd){target="_blank"}.

- [ ] Connectez-vous √† un Datalab
- [ ] Lancez un service **PostgreSQL**
- [ ] Lancez un service **cloudBeaver**
  - ouvrez ce service
  - v√©rifiez que vous √™tes connect√©s √† la base de donn√©es PostgreSQL

En attendant le lancement des services, voici un peu de lecture ci-dessous.


## M√©thodo : √âcrire une requ√™te

Il est parfois difficile d'√©crire du premier coup LA requ√™te qui r√©pond directement √† la question pos√©e.

Voici une m√©thode qui peut vous aider √† √©crire vos requ√™tes pas √† pas :

::: {.callout}
Imaginons que l'on vous demande de lister les noms et pr√©noms des joueuses du club de la ville de *Saint Quentin*, dont le pr√©nom commence par un *A* class√©es par elo d√©croissant.

joueuse([id_joueuse]{.underline}, nom, prenom, elo, #id_club)

club([id_club]{.underline}, nom, ville)
:::

### Listez les tables n√©cessaires

Commen√ßons par lister les tables n√©cessaires, puis joignons-les. 

Nous avons besoin ici des 2 tables que nous pouvons joindre en utilisant la colonne *id_club*.

```{.sql}
SELECT *
  FROM joueuse j
  JOIN club c USING(id_club);
```

::: {.callout-tip}
- Nous utilisons pour l'instant `SELECT *` pour s√©lectionner toutes les colonnes
  - nous enleverons les colonnes inutiles plus tard
- Nous utilisons des alias, cela rendra la requ√™te plus courte et plus claire 
  - j pour joueuse
  - c pour club
:::

### Appliquez les filtres

Filtrons pour ne conserver que les lignes qui nous int√©ressent.

- Ville du club : *Saint Quentin*
- Pr√©nom qui commence par un *A*

```{.sql}
SELECT *
  FROM joueuse j
  JOIN club c USING(id_club)
 WHERE c.ville = 'Saint Quentin'
   AND j.prenom LIKE 'A%';
```


### Ordonnez les r√©sultats

Ordonnons par elo d√©croissant.

```{.sql}
SELECT *
  FROM joueuse j
  JOIN club c USING(id_club)
 WHERE c.ville = 'Saint Quentin'
   AND j.prenom LIKE 'A%'
 ORDER BY j.elo DESC;
```


### S√©lectionner les colonnes requises

Il est demand√© de ne garder que les noms et pr√©noms des joueuses.

Rempla√ßons le *SELECT \** par les noms des colonnes.

```{.sql}
SELECT j.nom,
       j.prenom
  FROM joueuse j
  JOIN club c USING(id_club)
 WHERE c.ville = 'Saint Quentin'
   AND j.prenom LIKE 'A%'
 ORDER BY j.elo DESC;
```


## Exercices

### √âcole de musique :guitar:

Nous allons commencer par cr√©er les tables et ins√©rer les donn√©es :

- [ ] Copiez le contenu de ce [script sql](./data/tp2-musique-create-pop.sql){target="_blank"} 
- [ ] Collez dans la fen√™tre SQL de CloudBeaver
- [ ] Ex√©cutez le script
  - Cliquez sur la petite icone sous les triangles oranges qui ressemble √† :scroll:
  - raccourci (ALT + X)
- [ ] V√©rifiez que votre sch√©ma et vos tables sont cr√©√©s
  - Dans l'explorateur : PostgreSQL :arrow_right: Databases :arrow_right: defaultdb :arrow_right: Schemas
  - Clic droit sur *Schemas* :arrow_right: Refresh

Si tout est ok, vous n'avez plus besoin du script de cr√©ation et d'insertion de donn√©es.

- [ ] Supprimez tout le contenu du code SQL que vous venez d'ex√©cuter ou ouvrez un nouvel √©diteur SQL

Voici le mod√®le de donn√©es :

![](./data/tp2-musique-modele.PNG)

Vous pouvez maintenant commencer l'exercice et √©crire les requ√™tes permettant de r√©pondre aux questions suivantes :

- [ ] Quels sont les noms des instruments pr√©sents dans la base de donn√©es
- [ ] Quels sont les noms et adresses des adh√©rents
- [ ] Quelle est l'adresse de l'adh√©rent num√©ro 15
- [ ] Quels sont les num√©ros des adh√©rents de nom *DUPONT*

R√©alisez les jointures qui permettent d'obtenir :

- [ ] Les noms des instruments dont joue chaque adh√©rent
- [ ] Le nom des adh√©rents inscrits au cours num√©ro 6
- [ ] Les noms des cours ayant lieu le samedi et les noms des adh√©rents inscrits
- [ ] Les noms des cours auxquels sont inscrits les adh√©rents qui jouent du piano
- [ ] De quels instruments jouent les personnes inscrites au cours de guitare classique (`GUIT-CLASS`)


### Location de DVD :cd:

Il fut un temps o√π des entreprises se sp√©cialisaient dans la location de DVD. Dans cet exercice, une telle entreprise souhaite informatiser la gestion des pr√™ts.

Voici le Mod√®le de donn√©es :

![](./data/tp2-dvd-modele.PNG)

#### Cr√©ation de tables

- [ ] Utiliser le code ci-dessous pour cr√©er le sch√©ma et les 3 tables de droite
  ```{.sql}
  DROP SCHEMA IF EXISTS dvd CASCADE;
  
  CREATE SCHEMA dvd;
  
  CREATE TABLE dvd.realisateur(
      num_realisateur    INT PRIMARY KEY,
      nom_realisateur    TEXT,
      prenom_realisateur TEXT);
  
  CREATE TABLE dvd.film(
      num_film       INT PRIMARY KEY,
      titre          TEXT,
      genre          TEXT,
      date_sortie    DATE);
   
  CREATE TABLE dvd.a_realise(
      num_film         INT REFERENCES dvd.film(num_film),
      num_realisateur  INT REFERENCES dvd.realisateur(num_realisateur),
      PRIMARY KEY (num_film, num_realisateur));
  ```
- [ ] √âcrivez les requ√™tes qui permettent de cr√©er les 3 autres tables
- [ ] Chargez les donn√©es avec ce [script sql](./data/tp2-dvd-pop.sql){target="_blank"} 

::: {.callout-tip collapse="true"}
Attention, ici l'ordre de cr√©ation des tables a son importance.

Reprenons et modifions l'exemple ci-dessus :

- imaginez que vous essayez de [cr√©er en premier]{.underline} la table `a_realise`
- le champ *num_film* de cette table est une cl√© √©trang√®re
- il r√©f√©rence la cl√© primaire *num_film* de la table `film`
- or si la table `film` n'existe pas, √† votre avis, que va-t-il se passer ?
:::

#### Requ√™tes

Donnez les requ√™tes pour obtenir :

- [ ] Nom et pr√©nom des adh√©rents
- [ ] Titre des films de la base 
- [ ] Num√©ro d'adh√©rent de `Pierre DUCHEMIN`
- [ ] Nom, Pr√©nom et adresse de tous les `DUCHEMIN`
- [ ] Num√©ro des DVD du film `la guerre des etoiles`

Pour les 3 requ√™tes suivantes, vous afficherez les noms et pr√©noms sur une seule colonne. Utilisez le mot cl√© `AS` pour renommer cette colonne √† l'affichage.

- [ ] Nom, Pr√©nom des adh√©rents ayant emprunt√© le film `la guerre des etoiles`
- [ ] Nom, Pr√©nom des adh√©rents ayant au moins un emprunt en cours (la date de fin de l'emprunt est nulle) 
- [ ] Nom, Pr√©nom du r√©alisateur de la *Guerre des √©toiles*

::: {.callout-tip collapse="true"}
Il existe diff√©rentes mani√®res de concat√©ner du texte :

- fonctions PostgreSQL *CONCAT()*, *CONCAT_WS()*
- op√©rateur `||`
:::

- [ ] Titre des films emprunt√©s par Pierre DUCHEMIN, ainsi que dates de d√©but et de fin
- [ ] Nom des r√©alisateurs des films emprunt√©s par Pierre DUCHEMIN
- [ ] Nom des r√©alisateurs de films de science fiction ou policiers 

Utilisons maintenant des m√©thodes d'agr√©gation pour r√©pondre aux questions suivantes :

- [ ] Nombre de DVD dont le co√ªt de l'emprunt est inf√©rieur ou √©gal √† 2‚Ç¨
- [ ] Nombre d'emprunts ayant √©t√© effectu√©s par Dominique Duchemin
- [ ] Nombre de films diff√©rents ayant √©t√© emprunt√©s par Dominique Duchemin 
- [ ] Num√©ro des DVD en ordre d√©croissant du nombre de fois qu'ils ont √©t√© emprunt√©s
- [ ] Num√©ro du DVD le plus r√©cemment achet√©

Quelques questions sur les dates :

- [ ] Quelle a √©t√© la dur√©e d'emprunt la plus longue
- [ ] En date du 10 ao√ªt 2010, combien de DVD sont en cours d'emprunt
- [ ] Combien de dvd ont √©t√© achet√©s chaque ann√©e



Pour terminer cet exercice, nous allons rechercher les titres des films qui n'ont jamais √©t√© emprunt√©s. Proc√©dons par √©tapes et √©crivez les requ√™tes suivantes :

- [ ] Diff√©rents num√©ros des films emprunt√©s
- [ ] Titre des films ayant pour num√©ro 18, 19 ou 20
- [ ] Titre des films n'ayant pas pour num√©ros ni 18, ni 19, ni 20
- [ ] Titre des films n'ayant jamais √©t√© emprunt√©s




### Rugby World Cup :rugby_football:

::: {.callout}
Pour les plus rapides :rocket:
:::

Nous souhaitons informatiser les r√©sultats de la coupe du monde de rugby. Pour cela nous avons cr√©√© les deux tables suivantes : *equipe* et *matches*.

Commencez par cr√©ez et charger les tables avec [ce script](./data/tp2-rugby-create-pop.sql){target="_blank"}.

- [ ] Donner les noms des √©quipes qui ont jou√© √† Nantes
- [ ] Contre quelles √©quipes a jou√© l'√©quipe de France ?
- [ ] Pour tous les matchs, affichez les informations suivantes : 
  - Date du match 
  - Nom de la premi√®re √©quipe 
  - nombre de points de la premi√®re √©quipe 
  - nombre de points de la deuxi√®me √©quipe 
  - nom de la deuxi√®me √©quipe et lieu du match 
- [ ] Quels sont les noms d'√©quipes qui ont gagn√© au moins deux matchs 
- [ ] Quels sont les noms des √©quipes qui ont perdu tous leurs matchs
- [ ] Pour chaque √©quipe donner le nombre de matchs qu'elles ont gagn√© ou perdu
- [ ] Donner le nombre total de points obtenus par √©quipe en classant les √©quipes de celle ayant marqu√© le plus √† celle ayant marqu√© le moins


## Arr√™tez vos services {.unnumbered}

C'est la fin du TP, vous pouvez maintenant sauvegarder votre travail et lib√©rer les ressources r√©serv√©es :

- [ ] Copiez-collez vos scripts SQL sur votre machine
- [ ] Arr√™ter les services du Datalab